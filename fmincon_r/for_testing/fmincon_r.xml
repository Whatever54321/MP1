<?xml version="1.0"?>
<doc>
    <assembly>
        <name>fmincon_r</name>
    </assembly>
    <members>
        <member name="T:fmincon_r.f_method1">
            <summary>
            The f_method1 class provides a CLS compliant, MWArray interface to the MATLAB
            functions contained in the files:
            <newpara></newpara>
            C:\Users\xjs\Desktop\matlab_related\fmincon_r.m
            </summary>
            <remarks>
            @Version 4.0
            </remarks>
        </member>
        <member name="M:fmincon_r.f_method1.#cctor">
            <summary internal= "true">
            The static constructor instantiates and initializes the MATLAB Runtime instance.
            </summary>
        </member>
        <member name="M:fmincon_r.f_method1.#ctor">
            <summary>
            Constructs a new instance of the f_method1 class.
            </summary>
        </member>
        <member name="M:fmincon_r.f_method1.Finalize">
            <summary internal= "true">
            Class destructor called by the CLR garbage collector.
            </summary>
        </member>
        <member name="M:fmincon_r.f_method1.Dispose">
            <summary>
            Frees the native resources associated with this object
            </summary>
        </member>
        <member name="M:fmincon_r.f_method1.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
        </member>
        <member name="M:fmincon_r.f_method1.fmincon_r">
             <summary>
             Provides a single output, 0-input MWArrayinterface to the fmincon_r MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             eval(['func1=@(',str2,')',str1,'-1;']);
             options = optimoptions('particleswarm','display','off');
             x0 = particleswarm(@(x)sum(func(x).^2),n,lb,ub,options);
             opts = optimoptions(@fmincon,'Algorithm','interior-point','Display','off');
             problem  =
             createOptimProblem('fmincon','x0',x0,'objective',@(x)0,'lb',lb,'ub',ub,'nonlcon',@
             (x)constrain(x,func));
             gs = GlobalSearch;
             [result,~,exitflag] = gs.run(problem);
             fval = func(result);
             </remarks>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:fmincon_r.f_method1.fmincon_r(MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 1-input MWArrayinterface to the fmincon_r MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             eval(['func1=@(',str2,')',str1,'-1;']);
             options = optimoptions('particleswarm','display','off');
             x0 = particleswarm(@(x)sum(func(x).^2),n,lb,ub,options);
             opts = optimoptions(@fmincon,'Algorithm','interior-point','Display','off');
             problem  =
             createOptimProblem('fmincon','x0',x0,'objective',@(x)0,'lb',lb,'ub',ub,'nonlcon',@
             (x)constrain(x,func));
             gs = GlobalSearch;
             [result,~,exitflag] = gs.run(problem);
             fval = func(result);
             </remarks>
             <param name="str1">Input argument #1</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:fmincon_r.f_method1.fmincon_r(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 2-input MWArrayinterface to the fmincon_r MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             eval(['func1=@(',str2,')',str1,'-1;']);
             options = optimoptions('particleswarm','display','off');
             x0 = particleswarm(@(x)sum(func(x).^2),n,lb,ub,options);
             opts = optimoptions(@fmincon,'Algorithm','interior-point','Display','off');
             problem  =
             createOptimProblem('fmincon','x0',x0,'objective',@(x)0,'lb',lb,'ub',ub,'nonlcon',@
             (x)constrain(x,func));
             gs = GlobalSearch;
             [result,~,exitflag] = gs.run(problem);
             fval = func(result);
             </remarks>
             <param name="str1">Input argument #1</param>
             <param name="str2">Input argument #2</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:fmincon_r.f_method1.fmincon_r(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 3-input MWArrayinterface to the fmincon_r MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             eval(['func1=@(',str2,')',str1,'-1;']);
             options = optimoptions('particleswarm','display','off');
             x0 = particleswarm(@(x)sum(func(x).^2),n,lb,ub,options);
             opts = optimoptions(@fmincon,'Algorithm','interior-point','Display','off');
             problem  =
             createOptimProblem('fmincon','x0',x0,'objective',@(x)0,'lb',lb,'ub',ub,'nonlcon',@
             (x)constrain(x,func));
             gs = GlobalSearch;
             [result,~,exitflag] = gs.run(problem);
             fval = func(result);
             </remarks>
             <param name="str1">Input argument #1</param>
             <param name="str2">Input argument #2</param>
             <param name="x0">Input argument #3</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:fmincon_r.f_method1.fmincon_r(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 4-input MWArrayinterface to the fmincon_r MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             eval(['func1=@(',str2,')',str1,'-1;']);
             options = optimoptions('particleswarm','display','off');
             x0 = particleswarm(@(x)sum(func(x).^2),n,lb,ub,options);
             opts = optimoptions(@fmincon,'Algorithm','interior-point','Display','off');
             problem  =
             createOptimProblem('fmincon','x0',x0,'objective',@(x)0,'lb',lb,'ub',ub,'nonlcon',@
             (x)constrain(x,func));
             gs = GlobalSearch;
             [result,~,exitflag] = gs.run(problem);
             fval = func(result);
             </remarks>
             <param name="str1">Input argument #1</param>
             <param name="str2">Input argument #2</param>
             <param name="x0">Input argument #3</param>
             <param name="lbvalue">Input argument #4</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:fmincon_r.f_method1.fmincon_r(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides a single output, 5-input MWArrayinterface to the fmincon_r MATLAB
             function.
             </summary>
             <remarks>
             M-Documentation:
             eval(['func1=@(',str2,')',str1,'-1;']);
             options = optimoptions('particleswarm','display','off');
             x0 = particleswarm(@(x)sum(func(x).^2),n,lb,ub,options);
             opts = optimoptions(@fmincon,'Algorithm','interior-point','Display','off');
             problem  =
             createOptimProblem('fmincon','x0',x0,'objective',@(x)0,'lb',lb,'ub',ub,'nonlcon',@
             (x)constrain(x,func));
             gs = GlobalSearch;
             [result,~,exitflag] = gs.run(problem);
             fval = func(result);
             </remarks>
             <param name="str1">Input argument #1</param>
             <param name="str2">Input argument #2</param>
             <param name="x0">Input argument #3</param>
             <param name="lbvalue">Input argument #4</param>
             <param name="ubvalue">Input argument #5</param>
             <returns>An MWArray containing the first output argument.</returns>
            
        </member>
        <member name="M:fmincon_r.f_method1.fmincon_r(System.Int32)">
             <summary>
             Provides the standard 0-input MWArray interface to the fmincon_r MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             eval(['func1=@(',str2,')',str1,'-1;']);
             options = optimoptions('particleswarm','display','off');
             x0 = particleswarm(@(x)sum(func(x).^2),n,lb,ub,options);
             opts = optimoptions(@fmincon,'Algorithm','interior-point','Display','off');
             problem  =
             createOptimProblem('fmincon','x0',x0,'objective',@(x)0,'lb',lb,'ub',ub,'nonlcon',@
             (x)constrain(x,func));
             gs = GlobalSearch;
             [result,~,exitflag] = gs.run(problem);
             fval = func(result);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:fmincon_r.f_method1.fmincon_r(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 1-input MWArray interface to the fmincon_r MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             eval(['func1=@(',str2,')',str1,'-1;']);
             options = optimoptions('particleswarm','display','off');
             x0 = particleswarm(@(x)sum(func(x).^2),n,lb,ub,options);
             opts = optimoptions(@fmincon,'Algorithm','interior-point','Display','off');
             problem  =
             createOptimProblem('fmincon','x0',x0,'objective',@(x)0,'lb',lb,'ub',ub,'nonlcon',@
             (x)constrain(x,func));
             gs = GlobalSearch;
             [result,~,exitflag] = gs.run(problem);
             fval = func(result);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="str1">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:fmincon_r.f_method1.fmincon_r(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 2-input MWArray interface to the fmincon_r MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             eval(['func1=@(',str2,')',str1,'-1;']);
             options = optimoptions('particleswarm','display','off');
             x0 = particleswarm(@(x)sum(func(x).^2),n,lb,ub,options);
             opts = optimoptions(@fmincon,'Algorithm','interior-point','Display','off');
             problem  =
             createOptimProblem('fmincon','x0',x0,'objective',@(x)0,'lb',lb,'ub',ub,'nonlcon',@
             (x)constrain(x,func));
             gs = GlobalSearch;
             [result,~,exitflag] = gs.run(problem);
             fval = func(result);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="str1">Input argument #1</param>
             <param name="str2">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:fmincon_r.f_method1.fmincon_r(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 3-input MWArray interface to the fmincon_r MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             eval(['func1=@(',str2,')',str1,'-1;']);
             options = optimoptions('particleswarm','display','off');
             x0 = particleswarm(@(x)sum(func(x).^2),n,lb,ub,options);
             opts = optimoptions(@fmincon,'Algorithm','interior-point','Display','off');
             problem  =
             createOptimProblem('fmincon','x0',x0,'objective',@(x)0,'lb',lb,'ub',ub,'nonlcon',@
             (x)constrain(x,func));
             gs = GlobalSearch;
             [result,~,exitflag] = gs.run(problem);
             fval = func(result);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="str1">Input argument #1</param>
             <param name="str2">Input argument #2</param>
             <param name="x0">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:fmincon_r.f_method1.fmincon_r(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 4-input MWArray interface to the fmincon_r MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             eval(['func1=@(',str2,')',str1,'-1;']);
             options = optimoptions('particleswarm','display','off');
             x0 = particleswarm(@(x)sum(func(x).^2),n,lb,ub,options);
             opts = optimoptions(@fmincon,'Algorithm','interior-point','Display','off');
             problem  =
             createOptimProblem('fmincon','x0',x0,'objective',@(x)0,'lb',lb,'ub',ub,'nonlcon',@
             (x)constrain(x,func));
             gs = GlobalSearch;
             [result,~,exitflag] = gs.run(problem);
             fval = func(result);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="str1">Input argument #1</param>
             <param name="str2">Input argument #2</param>
             <param name="x0">Input argument #3</param>
             <param name="lbvalue">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:fmincon_r.f_method1.fmincon_r(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray)">
             <summary>
             Provides the standard 5-input MWArray interface to the fmincon_r MATLAB function.
             </summary>
             <remarks>
             M-Documentation:
             eval(['func1=@(',str2,')',str1,'-1;']);
             options = optimoptions('particleswarm','display','off');
             x0 = particleswarm(@(x)sum(func(x).^2),n,lb,ub,options);
             opts = optimoptions(@fmincon,'Algorithm','interior-point','Display','off');
             problem  =
             createOptimProblem('fmincon','x0',x0,'objective',@(x)0,'lb',lb,'ub',ub,'nonlcon',@
             (x)constrain(x,func));
             gs = GlobalSearch;
             [result,~,exitflag] = gs.run(problem);
             fval = func(result);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="str1">Input argument #1</param>
             <param name="str2">Input argument #2</param>
             <param name="x0">Input argument #3</param>
             <param name="lbvalue">Input argument #4</param>
             <param name="ubvalue">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:fmincon_r.f_method1.fmincon_r(System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
             <summary>
             Provides an interface for the fmincon_r function in which the input and output
             arguments are specified as an array of MWArrays.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             eval(['func1=@(',str2,')',str1,'-1;']);
             options = optimoptions('particleswarm','display','off');
             x0 = particleswarm(@(x)sum(func(x).^2),n,lb,ub,options);
             opts = optimoptions(@fmincon,'Algorithm','interior-point','Display','off');
             problem  =
             createOptimProblem('fmincon','x0',x0,'objective',@(x)0,'lb',lb,'ub',ub,'nonlcon',@
             (x)constrain(x,func));
             gs = GlobalSearch;
             [result,~,exitflag] = gs.run(problem);
             fval = func(result);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of MWArray output arguments</param>
             <param name= "argsIn">Array of MWArray input arguments</param>
            
        </member>
        <member name="M:fmincon_r.f_method1.WaitForFiguresToDie">
             <summary>
             This method will cause a MATLAB figure window to behave as a modal dialog box.
             The method will not return until all the figure windows associated with this
             component have been closed.
             </summary>
             <remarks>
             An application should only call this method when required to keep the
             MATLAB figure window from disappearing.  Other techniques, such as calling
             Console.ReadLine() from the application should be considered where
             possible.</remarks>
            
        </member>
    </members>
</doc>
